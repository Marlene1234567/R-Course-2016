install.packages("tidyverse")
?seq
seq()
seq(1, 100)
seq(100, 1)
install.packages("XML")
plot(rnorm(100))
plot(rnorm(100))
set.seed(1)
plot(rnorm(100))
plot(rnorm(100))
df1
print(df1)
print(df2)
library(XML)
library(XML)
tokens <- vector('character')
types <- vector('character')
xmlEventParse(
"../data/t_990505_47.xml",
handlers = list(
't' = function(name, attr) {
tokens <<- c(tokens, attr['word'])
types <<- c(types, attr['lemma'])
## morphology
}
),
addContext = FALSE
)
#names(tokens) <- NULL
tokens <- unname(tokens)
library(XML)
tokens <- vector('character')
types <- vector('character')
wortart <- vector('character')
xmlEventParse(
"../data/t_990505_47.xml",
handlers = list(
't' = function(name, attr) {
tokens <<- c(tokens, attr['word'])
types <<- c(types, attr['lemma'])
wortart <<- c(wortart, attr['pos'])
## morphology
}
),
addContext = FALSE
)
#names(tokens) <- NULL
tokens <- unname(tokens)
df1 <- data.frame(tokens, types, wortart)
df1[order(df1$tokens)]
df1[order(df1$tokens), ]
mean(subset(df1$wortart == NN, length(df1$tokens))
tokens.length[df1$wortart == NN]
mean(subset(df1$tokens.length, df1$wortart == NN))
mean(subset(df1$tokens.length, df1$wortart == "NN"))
mean(subset(nchar(tokens), df1$wortart == "NN"))
library(XML)
tokens <- vector('character')
types <- vector('character')
wortart <- vector('character')
genus <- vector('character')
xmlEventParse(
"../data/t_990505_47.xml",
handlers = list(
't' = function(name, attr) {
tokens <<- c(tokens, attr['word'])
types <<- c(types, attr['lemma'])
wortart <<- c(wortart, attr['pos'])
genus <<- c(genus, attr['morph'])
## morphology
}
),
addContext = FALSE
)
#names(tokens) <- NULL
tokens <- unname(tokens)
df1[order(df1$morph)]
df1[order(df1$genus)]
df1
library(XML)
tokens <- vector('character')
types <- vector('character')
wortart <- vector('character')
genus <- vector('character')
xmlEventParse(
"../data/t_990505_47.xml",
handlers = list(
't' = function(name, attr) {
tokens <<- c(tokens, attr['word'])
types <<- c(types, attr['lemma'])
wortart <<- c(wortart, attr['pos'])
genus <<- c(genus, attr['morph'])
## morphology
}
),
addContext = FALSE
)
#names(tokens) <- NULL
tokens <- unname(tokens)
df1
library(XML)
tokens <- vector('character')
types <- vector('character')
wortart <- vector('character')
genus <- vector('character')
xmlEventParse(
"../data/t_990505_47.xml",
handlers = list(
't' = function(name, attr) {
tokens <<- c(tokens, attr['word'])
types <<- c(types, attr['lemma'])
genus <<- c(genus, attr['morph'])
wortart <<- c(wortart, attr['pos'])
## morphology
}
),
addContext = FALSE
)
#names(tokens) <- NULL
tokens <- unname(tokens)
df1
df1 <- data.frame(tokens, types, wortart, genus)
df1
options(max.print=999999)
df1
df1[order(df1$genus)]
df1[order(df1$genus), ]
rank(df1)
rank(subset(df1$wortart == NN, df1$genus)
table(df1$genus)
sort(table(df1$genus))
subset(df1, df1$tokens %in% df1$types
df1[df1 %in% c(df1$types, df1$tokens)]
df1
subset(df1, df1$tokens == df1$types)
match(typen %in% tokens)
match(types %in% tokens)
match(types %in% tokens, df1)
df1
types %in% tokens
count(TRUE)
df1(types %in% tokens)
df1
table(tokens %n% types)
table(tokens %in% types)
table(types %in% tokens)
write.table(df1, file='df1.csv', sep='\t')
df1 <-  read.table(file = 'df1.csv')
write.table(df1, file='df1.csv', sep='\t')
